import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import warnings
warnings.filterwarnings("ignore", category=UserWarning, module="pickle")
# Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c file .pkl
required_files = ['stacking_model_compressed.pkl', 'xgb_high_model.pkl', 'preprocessor.pkl', 'feature_cols.pkl']
missing_files = [f for f in required_files if not os.path.exists(f)]

if missing_files:
    st.error(
        f"Thi·∫øu c√°c file: {', '.join(missing_files)}. Vui l√≤ng ƒë·∫£m b·∫£o c√°c file n√†y n·∫±m trong c√πng th∆∞ m·ª•c v·ªõi app.py.")
    st.stop()

# T·∫£i c√°c m√¥ h√¨nh v√† preprocessor
try:
    stacking_model = joblib.load('stacking_model_compressed.pkl')
    xgb_high_model = joblib.load('xgb_high_model.pkl')
    preprocessor = joblib.load('preprocessor.pkl')
    feature_cols = joblib.load('feature_cols.pkl')
except Exception as e:
    st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
    st.stop()


# H√†m d·ª± ƒëo√°n gi√°
def predict_price(input_data):
    try:
        # Chuy·ªÉn input_data th√†nh DataFrame
        input_df = pd.DataFrame([input_data], columns=feature_cols)

        # D·ª± ƒëo√°n b·∫±ng Stacking (log scale)
        pred_log = stacking_model.predict(input_df)
        pred = np.expm1(pred_log)[0]

        # N·∫øu gi√° d·ª± ƒëo√°n > 1795, d√πng m√¥ h√¨nh XGBoost gi√° cao
        if pred > 1795:
            pred_log_high = xgb_high_model.predict(input_df)
            pred = np.expm1(pred_log_high)[0]

        return pred
    except Exception as e:
        st.error(f"L·ªói khi d·ª± ƒëo√°n: {str(e)}")
        return None


# Giao di·ªán Streamlit
st.set_page_config(page_title="D·ª± ƒëo√°n Gi√° Thu√™ Nh√†", layout="wide")

# Ti√™u ƒë·ªÅ v√† m√¥ t·∫£
st.title("üè° D·ª± ƒëo√°n Gi√° Thu√™ Nh√†")
st.markdown("""
·ª®ng d·ª•ng n√†y d·ª± ƒëo√°n gi√° thu√™ nh√† d·ª±a tr√™n m√¥ h√¨nh h·ªçc m√°y t·ªëi ∆∞u (Stacking XGBoost + Random Forest).
Nh·∫≠p th√¥ng tin cƒÉn h·ªô v√† nh·∫•n **D·ª± ƒëo√°n** ƒë·ªÉ xem k·∫øt qu·∫£.
ƒê·ªô tin c·∫≠y: MAPE ~8.98% (l·ªói trung b√¨nh kho·∫£ng ¬±8.98% so v·ªõi gi√° th·ª±c t·∫ø).
""")

# Sidebar cho input
st.sidebar.header("Nh·∫≠p th√¥ng tin cƒÉn h·ªô")

# Danh s√°ch th·ªß c√¥ng cho cityname, state, source
city_options = ['Dallas', 'New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio']
state_options = ['TX', 'NY', 'CA', 'IL', 'AZ', 'PA']
source_options = ['RentDigs.com', 'ApartmentGuide', 'Other']

cityname = st.sidebar.selectbox("Th√†nh ph·ªë", options=city_options,
                                index=city_options.index('Dallas') if 'Dallas' in city_options else 0)
state = st.sidebar.selectbox("Bang", options=state_options,
                             index=state_options.index('TX') if 'TX' in state_options else 0)
source = st.sidebar.selectbox("Ngu·ªìn d·ªØ li·ªáu", options=source_options,
                              index=source_options.index('RentDigs.com') if 'RentDigs.com' in source_options else 0)

# Numeric features
square_feet = st.sidebar.slider("Di·ªán t√≠ch (ft¬≤)", min_value=396, max_value=2260, value=900, step=10)
bathrooms = st.sidebar.slider("S·ªë ph√≤ng t·∫Øm", min_value=1, max_value=3, value=1, step=1)
bedrooms = st.sidebar.slider("S·ªë ph√≤ng ng·ªß", min_value=1, max_value=4, value=2, step=1)
latitude = st.sidebar.number_input("Vƒ© ƒë·ªô", min_value=26.36, max_value=47.72, value=37.23, step=0.01)
longitude = st.sidebar.number_input("Kinh ƒë·ªô", min_value=-122.31, max_value=-70.98, value=-84.56, step=0.01)
month = st.sidebar.slider("Th√°ng ƒëƒÉng tin", min_value=1, max_value=12, value=9, step=1)
year = st.sidebar.slider("NƒÉm ƒëƒÉng tin", min_value=2018, max_value=2019, value=2019, step=1)
day = st.sidebar.slider("Ng√†y ƒëƒÉng tin", min_value=1, max_value=31, value=18, step=1)

# Amenities (checkbox cho top features quan tr·ªçng)
st.sidebar.subheader("Ti·ªán √≠ch")
amenities = {
    'amenities_Parking': st.sidebar.checkbox("B√£i ƒë·ªó xe", value=True),
    'amenities_Pool': st.sidebar.checkbox("H·ªì b∆°i", value=True),
    'amenities_Gym': st.sidebar.checkbox("Ph√≤ng gym", value=True),
    'amenities_Patio/Deck': st.sidebar.checkbox("S√¢n hi√™n", value=False),
    'amenities_Washer Dryer': st.sidebar.checkbox("M√°y gi·∫∑t/s·∫•y", value=False),
    'amenities_Storage': st.sidebar.checkbox("Kho ch·ª©a", value=False),
    'amenities_Clubhouse': st.sidebar.checkbox("Nh√† c√¢u l·∫°c b·ªô", value=False),
    'amenities_Dishwasher': st.sidebar.checkbox("M√°y r·ª≠a b√°t", value=False),
    'amenities_AC': st.sidebar.checkbox("ƒêi·ªÅu h√≤a", value=True),
    'amenities_Refrigerator': st.sidebar.checkbox("T·ªß l·∫°nh", value=True),
    'amenities_Fireplace': st.sidebar.checkbox("L√≤ s∆∞·ªüi", value=False),
    'amenities_Cable or Satellite': st.sidebar.checkbox("C√°p/Internet", value=False),
    'amenities_Playground': st.sidebar.checkbox("S√¢n ch∆°i", value=False),
    'amenities_Internet Access': st.sidebar.checkbox("Truy c·∫≠p Internet", value=False),
    'amenities_Wood Floors': st.sidebar.checkbox("S√†n g·ªó", value=False),
    'amenities_Gated': st.sidebar.checkbox("C·ªïng b·∫£o v·ªá", value=False),
    'amenities_Tennis': st.sidebar.checkbox("S√¢n tennis", value=False),
    'amenities_TV': st.sidebar.checkbox("TV", value=False),
    'amenities_Elevator': st.sidebar.checkbox("Thang m√°y", value=False),
    'amenities_Basketball': st.sidebar.checkbox("S√¢n b√≥ng r·ªï", value=False),
    'amenities_Hot Tub': st.sidebar.checkbox("B·ªìn n∆∞·ªõc n√≥ng", value=False),
    'amenities_Garbage Disposal': st.sidebar.checkbox("M√°y x·ª≠ l√Ω r√°c", value=False),
    'amenities_View': st.sidebar.checkbox("T·∫ßm nh√¨n ƒë·∫πp", value=False),
    'amenities_Alarm': st.sidebar.checkbox("H·ªá th·ªëng b√°o ƒë·ªông", value=False),
    'amenities_Doorman': st.sidebar.checkbox("Nh√¢n vi√™n g√°c c·ª≠a", value=False),
    'amenities_Luxury': st.sidebar.checkbox("Cao c·∫•p", value=False)
}

# Pets allowed
st.sidebar.subheader("Ch√≠nh s√°ch th√∫ c∆∞ng")
pets_allowed = st.sidebar.radio("Cho ph√©p th√∫ c∆∞ng", options=['None', 'Cats', 'Dogs', 'Cats and Dogs'], index=0)
pets_allowed_Cats = 1 if pets_allowed in ['Cats', 'Cats and Dogs'] else 0
pets_allowed_Dogs = 1 if pets_allowed in ['Dogs', 'Cats and Dogs'] else 0
pets_allowed_None = 1 if pets_allowed == 'None' else 0

# Categorical features
fee = st.sidebar.selectbox("Ph√≠", options=['No', 'Yes'], index=0)
has_photo = st.sidebar.selectbox("·∫¢nh", options=['No', 'Thumbnail', 'Yes'], index=2)
price_type = st.sidebar.selectbox("Lo·∫°i gi√°", options=['Monthly', 'Weekly'], index=0)

# T·∫°o dictionary input
input_data = {
    'cityname': cityname,
    'state': state,
    'source': source,
    'square_feet': square_feet,
    'bathrooms': bathrooms,
    'bedrooms': bedrooms,
    'latitude': latitude,
    'longitude': longitude,
    'month': month,
    'year': year,
    'day': day,
    'fee': fee,
    'has_photo': has_photo,
    'price_type': price_type,
    **amenities,
    'pets_allowed_Cats': pets_allowed_Cats,
    'pets_allowed_Dogs': pets_allowed_Dogs,
    'pets_allowed_None': pets_allowed_None
}

# N√∫t d·ª± ƒëo√°n
if st.sidebar.button("D·ª± ƒëo√°n"):
    predicted_price = predict_price(input_data)
    if predicted_price is not None:
        # ƒê·ªãnh d·∫°ng s·ªë chu·∫©n v·ªõi d·∫•u ch·∫•m v√† k√Ω t·ª± USD
        st.success(f"**Gi√° thu√™ d·ª± ƒëo√°n: ${predicted_price:,.2f}**")
        lower_bound = predicted_price * 0.9102  # 100% - 8.98%
        upper_bound = predicted_price * 1.0898  # 100% + 8.98%
        st.info(
            f"ƒê·ªô tin c·∫≠y: ¬±8.98% (d·ª±a tr√™n MAPE c·ªßa m√¥ h√¨nh). Gi√° th·ª±c t·∫ø c√≥ th·ªÉ dao ƒë·ªông t·ª´ ${lower_bound:,.2f} ƒë·∫øn ${upper_bound:,.2f}.")
    else:
        st.error("Kh√¥ng th·ªÉ d·ª± ƒëo√°n. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o.")

# Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh
st.markdown("### Th√¥ng tin m√¥ h√¨nh")
st.write("""
- **M√¥ h√¨nh**: K·∫øt h·ª£p Stacking (XGBoost + Random Forest) v√† XGBoost ri√™ng cho gi√° cao (>1795 USD).
- **Hi·ªáu su·∫•t**:
  - RMSE: 213.27
  - MAE: 131.06
  - R¬≤: 0.9080
  - MAPE: 8.98%
- **Feature quan tr·ªçng nh·∫•t**: Th√†nh ph·ªë (`cityname`), di·ªán t√≠ch (`square_feet`), bang (`state`), s·ªë ph√≤ng t·∫Øm (`bathrooms`).
""")

# CSS ƒë·ªÉ c·∫£i thi·ªán giao di·ªán
st.markdown("""
<style>
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        padding: 10px 20px;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    .stSidebar {
        background-color: #f8f9fa;
    }
    .stSuccess {
        font-size: 1.2em;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)
